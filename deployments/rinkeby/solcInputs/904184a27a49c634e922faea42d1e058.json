{
  "language": "Solidity",
  "sources": {
    "contracts/Chainfy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// NatSpec\n/** @title A contract for notarize the certification in blockchain\n * @author Enrico Gava\n * @notice It store the digest and IPFS CID of every certification \n * @dev It is very easy\n */ \n\ncontract Chainfy is Ownable {\n    string public contractName = \"CryptoInnova\";\n    mapping(address => bool) public allowedAccounts;\n    address[] public allAllowedAccounts;\n    struct Product {\n        string productName;\n        uint productCode;\n        string[] productDigests;\n        string[] productCIDs;\n    }\n\n    //Product[] Products;\n    mapping(string => Product) Products;\n    mapping(string => bool) Existence;\n    string[] productNameList;\n\n    event newProduct(string name, uint code, string digest, string cid);\n    event addInfo(string name, uint code, string digest, string cid);\n\n    modifier authorizedAccounts() {\n        require(checkAllowed(msg.sender), \"l'utente non ha il permesso\");\n        _;\n    }\n\n    constructor(string memory _contractName) {\n        contractName = _contractName;\n        addAllowed(msg.sender);\n    }\n\n    // constructor() {\n    //     contractName = \"CryptoInnova\";\n    //     addAllowed(msg.sender);\n    // }\n\n    function setContractName(string memory _contractName)\n        public\n        authorizedAccounts\n    {\n        contractName = _contractName;\n    }\n\n    function getContractName() public view returns (string memory) {\n        return contractName;\n    }\n\n    function addAllowed(address _newAllowed) public onlyOwner {\n        require(\n            !allowedAccounts[_newAllowed],\n            \"Account gia presente tra quelli autorizzati!\"\n        );\n        allowedAccounts[_newAllowed] = true;\n        allAllowedAccounts.push(_newAllowed);\n    }\n\n    function removeAllowed(address _removeAllowed) public onlyOwner {\n        require(\n            allowedAccounts[_removeAllowed],\n            \"Account gia privo di autorizzazione!\"\n        );\n        allowedAccounts[_removeAllowed] = false;\n        uint length = allAllowedAccounts.length;\n        for (uint i; i <= length; i++) {\n            if (allAllowedAccounts[i] == _removeAllowed) {\n                allAllowedAccounts[i] = allAllowedAccounts[length - 1];\n                allAllowedAccounts.pop();\n                break;\n            }\n        }\n    }\n\n    function showAllowed()\n        public\n        view\n        returns (address[] memory _allAllowedAccounts)\n    {\n        return allAllowedAccounts;\n    }\n\n    function checkAllowed(address _allowed)\n        internal\n        view\n        returns (bool _check)\n    {\n        if (allowedAccounts[_allowed]) {\n            return true;\n        }\n    }\n\n\n    /**\n     * @notice this function is to add product\n     * @dev it add from zero\n     * @param _productName, _productCode, _productDigest, _productCID,\n     */ \n    function addProduct(\n        string memory _productName,\n        uint _productCode,\n        string memory _productDigest,\n        string memory _productCID\n    ) public authorizedAccounts {\n        require(!productExists(_productName), \"nome prodotto gia in lista!\");\n        Existence[_productName] = true;\n        Products[_productName].productName = _productName;\n        Products[_productName].productCode = _productCode;\n        Products[_productName].productDigests.push(_productDigest);\n        Products[_productName].productCIDs.push(_productCID);\n\n        productNameList.push(_productName);\n        emit newProduct(\n            _productName,\n            _productCode,\n            _productDigest,\n            _productCID\n        );\n    }\n\n    function checkProduct(string memory _name)\n        public\n        view\n        returns (\n            string memory _productName,\n            uint _productCode,\n            string[] memory _productDigests,\n            string[] memory _productCIDs\n        )\n    {\n        require(productExists(_name), \"nome prodotto errato o non in lista!\");\n        return (\n            Products[_name].productName,\n            Products[_name].productCode,\n            Products[_name].productDigests,\n            Products[_name].productCIDs\n        );\n    }\n\n    function addProductInfo(\n        string memory _name,\n        string memory _digest,\n        string memory _cid\n    ) public authorizedAccounts {\n        require(productExists(_name), \"nome prodotto errato o non in lista!\");\n        Products[_name].productDigests.push(_digest);\n        Products[_name].productCIDs.push(_cid);\n        emit addInfo(_name, Products[_name].productCode, _digest, _cid);\n    }\n\n    function showProductsByName()\n        public\n        view\n        returns (string[] memory _allProducts)\n    {\n        return productNameList;\n    }\n\n    function productExists(string memory _productName)\n        internal\n        view\n        returns (bool _exists)\n    {\n        if (Existence[_productName]) {\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}